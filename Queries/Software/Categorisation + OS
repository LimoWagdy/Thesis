let DeviceList = externaldata(Customer: string, Workspace: string, DeviceId:string, AlertTime: string) //optional AlertTime
["https://raw.githubusercontent.com/LimoWagdy/Thesis/refs/heads/main/Queries/QueryCSVs/AlertIdswithTime.csv"] 
with (format="csv", ignoreFirstRecord=True);

let LocalCertList = externaldata(SubjectCN: string, File: string, Category: string)
["https://raw.githubusercontent.com/LimoWagdy/Thesis/refs/heads/main/SoftwareCerts/Certs.csv"]
with (format="csv", ignoreFirstRecord=true);

let LatestOSVersions = datatable(OSPlatform:string, LatestBuild:string) [
    "Windows11", "10.0.26100.4770",
    "Windows10", "10.0.19045.6159"
];

// Define specific (Signer, FileName) rules to match on both fields
let FileNameMatches = datatable(Signer: string, FileName: string, Category: string) [
    "Apple Inc.", "iTunes.exe", "Media",
    "Kakao Corp.", "PotPlayerMini64.exe", "Media",
    "Microsoft Corporation", "MinecraftInstaller.exe", "Gaming"
];

// Branch 1: Match by Signer AND FileName for specific entries
let FileMatchStats = DeviceFileCertificateInfo
| join kind=inner (DeviceList | project DeviceId, AlertTime) on DeviceId 
| extend startTime = todatetime(AlertTime) - 14d, targetTime = todatetime(AlertTime)
| where Timestamp >= startTime and Timestamp < targetTime
| join kind=inner (
    DeviceFileEvents
    | project DeviceId, SHA1, FileName
) on DeviceId, SHA1
| join kind=leftouter FileNameMatches on Signer, FileName
| where isnotempty(Category)
| extend 
    Gaming = iff(Category == "Gaming", 1, 0),
    Media = iff(Category == "Media", 1, 0),
    Unknown = 0;

// Branch 2: General Signer-only match for other entries
let GeneralMatchStats = DeviceFileCertificateInfo
| join kind=inner (DeviceList | project DeviceId, AlertTime) on DeviceId
| extend startTime = todatetime(AlertTime) - 14d, targetTime = todatetime(AlertTime)
| where Timestamp >= startTime and Timestamp < targetTime
| join kind=leftouter (
    LocalCertList
    | project SubjectCN, Category
) on $left.Signer == $right.SubjectCN
| where Signer !in ("Apple Inc.", "Kakao Corp.", "Microsoft Corporation")
| extend 
    Crypto = iff(Category == "Crypto", 1, 0),
    Gambling = iff(Category == "Gambling", 1, 0),
    Gaming = iff(Category == "Gaming", 1, 0),
    Suspicious = iff(Category == "Suspicious", 1, 0),
    Media = iff(Category == "Media", 1, 0),
    Piracy = iff(Category == "Piracy", 1, 0),
    Unknown = iff(isempty(Category), 1, 0);

// Combine both
let CertCategoryStats = union FileMatchStats, GeneralMatchStats
| summarize 
    Crypto = max(Crypto), Gambling = max(Gambling), Gaming = max(Gaming),
    Suspicious = max(Suspicious), Media = max(Media), Piracy = max(Piracy), Unknown = max(Unknown)
  by DeviceId
| extend Diversity = Crypto + Gambling + Gaming + Media + Piracy + Suspicious;

// OS version check
let OSVersionStatus = DeviceTvmSoftwareInventory
| join kind=inner (DeviceList | project DeviceId) on DeviceId
| join kind=inner LatestOSVersions on OSPlatform
| project DeviceId, OSPlatform, OSVersion, 
          IsUpToDate = iff(OSVersion == LatestBuild, 1, 0);

// Final join
CertCategoryStats
| join kind=inner (OSVersionStatus) on DeviceId
| project-away DeviceId1, OSVersion
| distinct *
