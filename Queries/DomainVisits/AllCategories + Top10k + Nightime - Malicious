let DeviceList = dynamic([""]);  // Add DeviceIds here

let DomainList = externaldata(Domain: string, Category: string) ["https://raw.githubusercontent.com/LimoWagdy/Thesis/refs/heads/main/DomainLists/EverythingElse.csv"] with (format="csv", ignoreFirstRecord=True);

let Top10k = externaldata(Domain: string) ["https://raw.githubusercontent.com/LimoWagdy/Thesis/refs/heads/main/DomainLists/top-10k.csv"] with (format="csv", ignoreFirstRecord=True);

// Step 1: Join and flag category + popular domains
let CategorizedEvents = DeviceNetworkEvents
//| where DeviceId in (DeviceList)
| join kind=leftouter (DomainList) on $left.RemoteUrl == $right.Domain
| extend 
    Adult = iff(Category == "Porn", 1, 0),
    AI = iff(Category == "AI", 1, 0),
    Crypto = iff(Category == "Crypto", 1, 0),
    Entertainement = iff(Category == "Entertainement", 1, 0),
    Gambling = iff(Category == "Gambling", 1, 0),
    Gaming = iff(Category == "Gaming", 1, 0),
    Piracy = iff(Category == "Piracy", 1, 0),
    Social = iff(Category == "Social", 1, 0),
    IsPopular = iff(RemoteUrl in (Top10k), 1, 0)
| where Category in~ ("Adult", "AI", "Crypto", "Entertainement", "Gambling", "Gaming", "Piracy", "Social");

// Step 2: Compute per-device category flags and diversity
let PerCategoryStats = CategorizedEvents
| summarize 
    Adult = max(Adult), AI = max(AI), Crypto = max(Crypto),
    Entertainement = max(Entertainement), Gambling = max(Gambling), Gaming = max(Gaming),
    Piracy = max(Piracy), Social = max(Social)
  by DeviceId
| extend Diversity = iff(Adult + AI + Crypto + Entertainement + Gambling + Gaming + Piracy + Social > 1, 1, 0);

// Step 3: Compute Top10k ratio
let Top10kRatioStats = CategorizedEvents
| summarize 
    TotalCategorized = count(), 
    Top10kCount = sum(IsPopular)
  by DeviceId
| extend Top10kRatio = todouble(Top10kCount) / todouble(TotalCategorized);

// Step 4: Join all together
PerCategoryStats
| join kind=inner (Top10kRatioStats) on DeviceId
| project-away DeviceId1
